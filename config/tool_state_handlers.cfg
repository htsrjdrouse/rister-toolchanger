# tool_state_handlers.cfg
# Central handlers for tool state changes and tool management
# This file contains common handlers that work for all tools (e0, e1, c0, l0)

# === INIT_TOOL_STATES ===
[delayed_gcode INIT_TOOL_STATES]
initial_duration: 5.0
gcode:
    RESPOND MSG="Initializing all tool states..."
    
    # Wait for sensors to initialize
    G4 P3000
    
    # Initialize E0 tool sensors
    {% if printer['atc_switch de0'] is defined and printer['atc_switch ce0'] is defined %}
        {% set de0_direct = printer['atc_switch de0'].state %}
        {% set ce0_direct = printer['atc_switch ce0'].state %}
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=de0_state VALUE='"{de0_direct}"'
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=ce0_state VALUE='"{ce0_direct}"'
        RESPOND MSG="E0 sensors initialized: dock={de0_direct}, carriage={ce0_direct}"
    {% else %}
        # Fallback defaults assuming tool is docked
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=de0_state VALUE='"PRESSED"'
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=ce0_state VALUE='"RELEASED"'
        RESPOND MSG="E0 sensors using fallback defaults"
    {% endif %}
    
    # Initialize E1 tool sensors
    {% if printer['atc_switch de1'] is defined and printer['atc_switch ce1'] is defined %}
        {% set de1_direct = printer['atc_switch de1'].state %}
        {% set ce1_direct = printer['atc_switch ce1'].state %}
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=de1_state VALUE='"{de1_direct}"'
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=ce1_state VALUE='"{ce1_direct}"'
        RESPOND MSG="E1 sensors initialized: dock={de1_direct}, carriage={ce1_direct}"
    {% else %}
        # Fallback defaults assuming tool is docked
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=de1_state VALUE='"PRESSED"'
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=ce1_state VALUE='"RELEASED"'
        RESPOND MSG="E1 sensors using fallback defaults"
    {% endif %}
    
    # Initialize C0 tool sensors (camera tool)
    {% if printer['atc_switch dc0'] is defined and printer['atc_switch cc0'] is defined %}
        {% set dc0_direct = printer['atc_switch dc0'].state %}
        {% set cc0_direct = printer['atc_switch cc0'].state %}
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=dc0_state VALUE='"{dc0_direct}"'
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=cc0_state VALUE='"{cc0_direct}"'
        RESPOND MSG="C0 sensors initialized: dock={dc0_direct}, carriage={cc0_direct}"
    {% else %}
        # Fallback defaults assuming tool is docked
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=dc0_state VALUE='"PRESSED"'
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=cc0_state VALUE='"RELEASED"'
        RESPOND MSG="C0 sensors using fallback defaults"
    {% endif %}
    
    # Initialize L0 tool sensors (liquid dispenser)
    {% if printer['atc_switch dl0'] is defined and printer['atc_switch cl0'] is defined %}
        {% set dl0_direct = printer['atc_switch dl0'].state %}
        {% set cl0_direct = printer['atc_switch cl0'].state %}
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=dl0_state VALUE='"{dl0_direct}"'
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=cl0_state VALUE='"{cl0_direct}"'
        RESPOND MSG="L0 sensors initialized: dock={dl0_direct}, carriage={cl0_direct}"
    {% else %}
        # Fallback defaults assuming tool is docked
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=dl0_state VALUE='"PRESSED"'
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=cl0_state VALUE='"RELEASED"'
        RESPOND MSG="L0 sensors using fallback defaults"
    {% endif %}
    
    # Update LEDs based on read sensor values
    UPDATE_LED_FROM_SENSORS TOOL_ID="e0"
    UPDATE_LED_FROM_SENSORS TOOL_ID="e1" 
    # Skip c0 LED update as it's managed by camera service
    UPDATE_LED_FROM_SENSORS TOOL_ID="l0"
    
    # Setup the periodic sensor check to keep the states updated
    UPDATE_DELAYED_GCODE ID=READ_ALL_SENSORS DURATION=1.0
    
    RESPOND MSG="All tool states initialized successfully"

# === READ_ALL_SENSORS ===
[gcode_macro READ_ALL_SENSORS]
description: Read the current state of all tool sensors
gcode:
    # Read E0 sensors
    {% if printer['atc_switch de0'] is defined %}
        {% set de0_state = printer['atc_switch de0'].state %}
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=de0_state VALUE='"{de0_state}"'
    {% endif %}
    
    {% if printer['atc_switch ce0'] is defined %}
        {% set ce0_state = printer['atc_switch ce0'].state %}
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=ce0_state VALUE='"{ce0_state}"'
    {% endif %}
    
    # Read E1 sensors
    {% if printer['atc_switch de1'] is defined %}
        {% set de1_state = printer['atc_switch de1'].state %}
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=de1_state VALUE='"{de1_state}"'
    {% endif %}
    
    {% if printer['atc_switch ce1'] is defined %}
        {% set ce1_state = printer['atc_switch ce1'].state %}
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=ce1_state VALUE='"{ce1_state}"'
    {% endif %}
    
    # Read C0 sensors
    {% if printer['atc_switch dc0'] is defined %}
        {% set dc0_state = printer['atc_switch dc0'].state %}
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=dc0_state VALUE='"{dc0_state}"'
    {% endif %}
    
    {% if printer['atc_switch cc0'] is defined %}
        {% set cc0_state = printer['atc_switch cc0'].state %}
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=cc0_state VALUE='"{cc0_state}"'
    {% endif %}
    
    # Read L0 sensors
    {% if printer['atc_switch dl0'] is defined %}
        {% set dl0_state = printer['atc_switch dl0'].state %}
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=dl0_state VALUE='"{dl0_state}"'
    {% endif %}
    
    {% if printer['atc_switch cl0'] is defined %}
        {% set cl0_state = printer['atc_switch cl0'].state %}
        SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=cl0_state VALUE='"{cl0_state}"'
    {% endif %}
    
    # Update LEDs based on read values (skip c0)
    UPDATE_LED_FROM_SENSORS TOOL_ID="e0"
    UPDATE_LED_FROM_SENSORS TOOL_ID="e1"
    UPDATE_LED_FROM_SENSORS TOOL_ID="l0"

[delayed_gcode READ_ALL_SENSORS]
initial_duration: 0.0  # Will be triggered by INIT_TOOL_STATES
gcode:
    READ_ALL_SENSORS
    UPDATE_DELAYED_GCODE ID=READ_ALL_SENSORS DURATION=10.0  # Run again in 10 seconds

# === TOOL_SENSOR_STATES ===
[gcode_macro TOOL_SENSOR_STATES]
variable_de0_state: "UNKNOWN"
variable_ce0_state: "UNKNOWN"
variable_de1_state: "UNKNOWN"
variable_ce1_state: "UNKNOWN"
variable_dc0_state: "UNKNOWN"
variable_cc0_state: "UNKNOWN"
variable_dl0_state: "UNKNOWN"
variable_cl0_state: "UNKNOWN"
gcode:
    # This macro just stores variables for sensor states

# === GENERIC LED DISPATCHER ===
[gcode_macro UPDATE_LED_FROM_SENSORS]
description: Generic dispatcher that calls the appropriate tool-specific LED update macro
gcode:
    {% set tool_id = params.TOOL_ID|string %}
    
    # Route to appropriate tool-specific macro
    {% if tool_id.startswith('e') %}
        # Extruder tools
        UPDATE_LED_FROM_SENSORS_EXTRUDER TOOL_ID="{tool_id}"
    {% elif tool_id.startswith('c') %}
        # Camera tools - skip LED management as handled by camera service
        RESPOND MSG="Skipping LED update for camera tool {tool_id} - managed by camera service"
    {% elif tool_id.startswith('l') %}
        # Liquid dispenser tools
        UPDATE_LED_FROM_SENSORS_LIQUID TOOL_ID="{tool_id}"
    {% else %}
        RESPOND MSG="Unknown tool type for LED update: {tool_id}"
    {% endif %}

# === EXTRUDER LED MANAGEMENT ===
[gcode_macro UPDATE_LED_FROM_SENSORS_EXTRUDER]
description: Update LED state based on stored sensor states for extruder tools
gcode:
    {% set tool_id = params.TOOL_ID|string %}
    {% set verbose = params.VERBOSE|default(0)|int %}
    
    # Handle extruder tools (e0, e1, etc.)
    {% set tool_num = tool_id[1:] %}
    {% set dock_state_var = 'de' ~ tool_num ~ '_state' %}
    {% set carriage_state_var = 'ce' ~ tool_num ~ '_state' %}
    
    # Get the sensor states from our storage
    {% set dock_state = printer["gcode_macro TOOL_SENSOR_STATES"][dock_state_var] %}
    {% set carriage_state = printer["gcode_macro TOOL_SENSOR_STATES"][carriage_state_var] %}
    
    # Only print sensor states if verbose parameter is set
    {% if verbose == 1 %}
        RESPOND MSG="Sensor states: {dock_state_var}={dock_state}, {carriage_state_var}={carriage_state}"
    {% endif %}
    
    # Stop all LED effects first to prevent conflicts
    STOP_ALL_LED_EFFECTS TOOL_ID={tool_id}
    
    # Update LED based on sensor states
    {% if dock_state == "PRESSED" and carriage_state == "RELEASED" %}
        # Tool is docked (in dock, not on carriage) - White LED
        SET_LED_EFFECT EFFECT=dock_state_{tool_id}
        {% if verbose == 1 %}
            RESPOND MSG="Tool {tool_id}: LED set to DOCKED (white)"
        {% endif %}
        
    {% elif dock_state == "RELEASED" and carriage_state == "PRESSED" %}
        # Tool is on carriage (not in dock, on carriage) - Blue LED
        SET_LED_EFFECT EFFECT=lock_state_{tool_id}
        {% if verbose == 1 %}
            RESPOND MSG="Tool {tool_id}: LED set to ON CARRIAGE (blue)"
        {% endif %}
        
    {% elif dock_state == "PRESSED" and carriage_state == "PRESSED" %}
        # Error state: Both sensors triggered - Red blinking
        SET_LED_EFFECT EFFECT=error_blink_{tool_id}
        RESPOND MSG="ERROR: Both sensors active for tool {tool_id}"
        
    {% else %}
        # Tool is floating or in transit - Red blinking
        SET_LED_EFFECT EFFECT=error_blink_{tool_id}
        {% if verbose == 1 %}
            RESPOND MSG="Tool {tool_id} in transit or floating"
        {% endif %}
    {% endif %}

# === LIQUID DISPENSER LED MANAGEMENT ===
[gcode_macro UPDATE_LED_FROM_SENSORS_LIQUID]
description: Update LED state based on stored sensor states for liquid dispenser tools
gcode:
    {% set tool_id = params.TOOL_ID|string %}
    {% set verbose = params.VERBOSE|default(0)|int %}
    
    # Handle liquid dispenser tools (l0, l1, etc.)
    {% set tool_num = tool_id[1:] %}
    {% set dock_state_var = 'dl' ~ tool_num ~ '_state' %}
    {% set carriage_state_var = 'cl' ~ tool_num ~ '_state' %}
    
    # Get the sensor states from our storage
    {% set dock_state = printer["gcode_macro TOOL_SENSOR_STATES"][dock_state_var] %}
    {% set carriage_state = printer["gcode_macro TOOL_SENSOR_STATES"][carriage_state_var] %}
    
    # Only print sensor states if verbose parameter is set
    {% if verbose == 1 %}
        RESPOND MSG="Sensor states: {dock_state_var}={dock_state}, {carriage_state_var}={carriage_state}"
    {% endif %}
    
    # Stop all LED effects first to prevent conflicts
    STOP_ALL_LED_EFFECTS TOOL_ID={tool_id}
    
    # Update LED based on sensor states - using liquid dispenser LED effects
    {% if dock_state == "PRESSED" and carriage_state == "RELEASED" %}
        # Tool is docked (in dock, not on carriage) - White LED
        SET_LED_EFFECT EFFECT=dock_state_{tool_id}
        {% if verbose == 1 %}
            RESPOND MSG="Tool {tool_id}: LED set to DOCKED (white)"
        {% endif %}
        
    {% elif dock_state == "RELEASED" and carriage_state == "PRESSED" %}
        # Tool is on carriage (not in dock, on carriage) - Blue LED  
        SET_LED_EFFECT EFFECT=lock_state_{tool_id}
        {% if verbose == 1 %}
            RESPOND MSG="Tool {tool_id}: LED set to ON CARRIAGE (blue)"
        {% endif %}
        
    {% elif dock_state == "PRESSED" and carriage_state == "PRESSED" %}
        # Error state: Both sensors triggered - Red blinking
        SET_LED_EFFECT EFFECT=error_blink_{tool_id}
        RESPOND MSG="ERROR: Both sensors active for tool {tool_id}"
        
    {% else %}
        # Tool is floating or in transit - Red blinking
        SET_LED_EFFECT EFFECT=error_blink_{tool_id}
        {% if verbose == 1 %}
            RESPOND MSG="Tool {tool_id} in transit or floating"
        {% endif %}
    {% endif %}

# === DIAGNOSTIC TOOLS ===
[gcode_macro DIAG_SET_SENSOR_STATE]
description: Diagnostic tool to manually set sensor states
gcode:
    {% set dock = params.DOCK|default("UNKNOWN") %}
    {% set carriage = params.CARRIAGE|default("UNKNOWN") %}
    {% set tool = params.TOOL|default(0)|int %}
    {% set tool_type = params.TOOL_TYPE|default("e")|string %}  # e, l, c
    
    # Set the states based on tool type
    RESPOND MSG="Manually setting sensor states: Dock={dock}, Carriage={carriage} for {tool_type}{tool}"
    SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE="d{tool_type}{tool}_state" VALUE='"{dock}"'
    SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE="c{tool_type}{tool}_state" VALUE='"{carriage}"'
    
    # Update LED with proper tool ID format (skip c0)
    {% if tool_type != "c" %}
        UPDATE_LED_FROM_SENSORS TOOL_ID="{tool_type}{tool}"
    {% endif %}

# === TOOL VERIFICATION ===
[gcode_macro VERIFY_TOOL_STATE]
description: Verify tool is in the expected state
gcode:
    {% set tool_id = params.TOOL_ID|default('e0') %}
    {% set prefix = tool_id[0] %}  # e for extruder, c for camera, l for liquid
    {% set number = tool_id[1:]|int %}
    {% set expected_dock = params.DOCK|default('') %}
    {% set expected_carriage = params.CARRIAGE|default('') %}
    
    {% if prefix == 'e' %}
        # For extruder tools
        {% set dock_sensor = 'atc_switch de' ~ number %}
        {% set carriage_sensor = 'atc_switch ce' ~ number %}
    {% elif prefix == 'c' %}
        # For camera tools
        {% set dock_sensor = 'atc_switch dc' ~ number %}
        {% set carriage_sensor = 'atc_switch cc' ~ number %}
    {% elif prefix == 'l' %}
        # For liquid dispenser tools
        {% set dock_sensor = 'atc_switch dl' ~ number %}
        {% set carriage_sensor = 'atc_switch cl' ~ number %}
    {% else %}
        RESPOND MSG="Unknown tool type: {prefix}"
        RESPOND MSG="Supported types: e (extruder), c (camera), l (liquid)"
    {% endif %}
    
    # If we have valid sensor names and expected states, check
    {% if dock_sensor and carriage_sensor and expected_dock and expected_carriage %}
        # Check if sensors exist
        {% if printer[dock_sensor] is defined and printer[carriage_sensor] is defined %}
            # Read sensor states
            {% set dock_state = printer[dock_sensor].state %}
            {% set carriage_state = printer[carriage_sensor].state %}
            
            # Compare with expected states
            {% set dock_match = (expected_dock == 'PRESSED' and dock_state == 'PRESSED') or (expected_dock == 'RELEASED' and dock_state == 'RELEASED') %}
            {% set carriage_match = (expected_carriage == 'PRESSED' and carriage_state == 'PRESSED') or (expected_carriage == 'RELEASED' and carriage_state == 'RELEASED') %}
            
            # Check if both match
            {% if dock_match and carriage_match %}
                RESPOND MSG="Tool {tool_id} is in expected state"
            {% else %}
                RESPOND TYPE=error MSG="ERROR: Tool {tool_id} not in expected state!"
                RESPOND MSG="Expected: Dock {expected_dock}, Carriage {expected_carriage}"
                RESPOND MSG="Actual: Dock {dock_state}, Carriage {carriage_state}"
                # Set error state
                SET_GCODE_VARIABLE MACRO=VARIABLES_LIST VARIABLE=tc_state VALUE=-1
                SET_GCODE_VARIABLE MACRO=VARIABLES_LIST VARIABLE=tc_error_code VALUE="7"
                SET_GCODE_VARIABLE MACRO=VARIABLES_LIST VARIABLE=error_tools VALUE="{[tool_id]}"
            {% endif %}
        {% else %}
            RESPOND MSG="Sensors not defined for tool {tool_id}"
        {% endif %}
    {% else %}
        RESPOND MSG="Missing parameters. Usage: VERIFY_TOOL_STATE TOOL_ID=e0 DOCK=PRESSED|RELEASED CARRIAGE=PRESSED|RELEASED"
    {% endif %}

# === HELPER VERIFICATION MACROS ===
[gcode_macro VERIFY_TOOL_PICKUP]
description: Verify tool is properly on carriage
gcode:
    {% set tool_id = params.TOOL_ID|default('e0') %}
    # Tool should be on carriage: dock RELEASED, carriage PRESSED
    VERIFY_TOOL_STATE TOOL_ID="{tool_id}" DOCK=RELEASED CARRIAGE=PRESSED

[gcode_macro VERIFY_TOOL_DOCKED]
description: Verify tool is properly docked
gcode:
    {% set tool_id = params.TOOL_ID|default('e0') %}
    # Tool should be in dock: dock PRESSED, carriage RELEASED
    VERIFY_TOOL_STATE TOOL_ID="{tool_id}" DOCK=PRESSED CARRIAGE=RELEASED

[gcode_macro VERIFY_CURRENT_TOOL]
description: Verify the current tool is in the expected state
gcode:
    # Get current active tool as string
    {% set active_tool = printer["gcode_macro VARIABLES_LIST"].active_tool|default("none")|string %}
    
    # Check tool based on string ID
    {% if active_tool == "e0" %}
        CHECK_TOOL_STATE TOOL_ID=e0
    {% elif active_tool == "e1" %}
        CHECK_TOOL_STATE TOOL_ID=e1
    {% elif active_tool == "c0" %}
        CHECK_TOOL_STATE TOOL_ID=c0
    {% elif active_tool == "l0" %}
        CHECK_TOOL_STATE TOOL_ID=l0
    {% elif active_tool == "none" %}
        RESPOND MSG="No active tool to verify"
    {% else %}
        RESPOND MSG="Unknown active tool: {active_tool}"
    {% endif %}

# === MACHINE STATE CHECKING ===
[gcode_macro CHECK_MACHINE_STATE]
description: Verify machine is in correct state
gcode:
    # Check overall machine state
    {% set active_tool = printer["gcode_macro VARIABLES_LIST"].active_tool|default("none")|string %}
    {% if active_tool != "none" %}
        VERIFY_CURRENT_TOOL
    {% else %}
        RESPOND MSG="Machine state check: No active tool"
    {% endif %}

# === ERROR HANDLING ===
[gcode_macro RESET_DELAY_AND_CHECK_MACHINE_STATUS]
description: Reset and check machine status after sensor change
gcode:
    # Called when sensors change state - checks for correct configuration
    CHECK_MACHINE_STATE

[gcode_macro PAUSE_AND_ALERT]
description: Pause print and alert user of error
gcode:
    PAUSE
    M118 ! ALERT: Print paused due to tool error !
    M118 Check error_tools: {printer["gcode_macro VARIABLES_LIST"].error_tools}

# === TOOL POSITION STORAGE ===
[gcode_macro STORE_TOOLHEAD_POSITION]
variable_toolhead_pos_stored: 0
variable_bypass_toolhead_position: 0
variable_toolhead_x: 0 
variable_toolhead_y: 0
gcode:
    SET_GCODE_VARIABLE MACRO=STORE_TOOLHEAD_POSITION VARIABLE=toolhead_x VALUE="{params.X}"
    SET_GCODE_VARIABLE MACRO=STORE_TOOLHEAD_POSITION VARIABLE=toolhead_y VALUE="{params.Y}"
    SET_GCODE_VARIABLE MACRO=STORE_TOOLHEAD_POSITION VARIABLE=toolhead_pos_stored VALUE="1"

[gcode_macro CLEAR_TOOLHEAD_POSITION]
gcode:
    SET_GCODE_VARIABLE MACRO=STORE_TOOLHEAD_POSITION VARIABLE=toolhead_pos_stored VALUE="0"
    SET_GCODE_VARIABLE MACRO=STORE_TOOLHEAD_POSITION VARIABLE=toolhead_x VALUE="0"
    SET_GCODE_VARIABLE MACRO=STORE_TOOLHEAD_POSITION VARIABLE=toolhead_y VALUE="0"

# === TOOL USAGE TRACKING ===
[gcode_macro TOOL_USE_COUNT]
variable_e0_use_count: 0
variable_e1_use_count: 0
variable_c0_use_count: 0
variable_l0_use_count: 0
gcode:
    # This is just a placeholder for variables

[gcode_macro INCREMENT_TOOL_USE_COUNT]
description: Increment the usage count for a specific tool
gcode:
    {% set tool_id = params.T|default('e0') %}
    {% set prefix = tool_id[0] %}
    {% set num = tool_id[1:] %}
    {% set var_name = prefix ~ num ~ '_use_count' %}
    
    # Get current count
    {% set current_count = printer["gcode_macro TOOL_USE_COUNT"][var_name]|int %}
    {% set new_count = current_count + 1 %}
    
    # Update the counter
    SET_GCODE_VARIABLE MACRO=TOOL_USE_COUNT VARIABLE="{var_name}" VALUE="{new_count}"
    RESPOND MSG="Tool {tool_id} usage count: {new_count}"

# === Z-MOVEMENT HELPER FOR TOOL CHANGES ===
[gcode_macro TOOLCHANGE_Z_MOVE_START]
description: Move Z up safely before tool change
gcode:
    {% if printer.toolhead.position.z < 15 %}
        G91
        G1 Z15 F900
        G90
    {% endif %}

[gcode_macro TOOLCHANGE_Z_MOVE_END]
description: Move Z back after tool change if needed
gcode:
    # This would contain logic to restore Z position if needed
    # For now, it's just a placeholder
    G90

# === LED UTILITY FUNCTIONS ===
[gcode_macro STOP_ALL_LED_EFFECTS]
description: Stop all LED effects for a specific tool to prevent conflicts
gcode:
    {% set tool_id = params.TOOL_ID|string %}
    
    # Stop all possible LED effects for this tool
    SET_LED_EFFECT EFFECT=dock_state_{tool_id} STOP=1
    SET_LED_EFFECT EFFECT=lock_state_{tool_id} STOP=1  
    SET_LED_EFFECT EFFECT=error_blink_{tool_id} STOP=1
    SET_LED_EFFECT EFFECT=heating_{tool_id} STOP=1
    SET_LED_EFFECT EFFECT=idle_{tool_id} STOP=1

[gcode_macro FORCE_LED_UPDATE]
description: Force update all tool LEDs based on current sensor states
gcode:
    RESPOND MSG="Forcing LED update for all tools..."
    UPDATE_LED_FROM_SENSORS TOOL_ID="e0" VERBOSE=1
    UPDATE_LED_FROM_SENSORS TOOL_ID="e1" VERBOSE=1
    UPDATE_LED_FROM_SENSORS TOOL_ID="l0" VERBOSE=1
    RESPOND MSG="LED update complete"

[gcode_macro DEBUG_SENSOR_STATES]
description: Show current sensor states for all tools
gcode:
    {% set sensors = printer["gcode_macro TOOL_SENSOR_STATES"] %}
    RESPOND MSG="=== CURRENT SENSOR STATES ==="
    RESPOND MSG="E0: dock={sensors.de0_state}, carriage={sensors.ce0_state}"
    RESPOND MSG="E1: dock={sensors.de1_state}, carriage={sensors.ce1_state}"
    RESPOND MSG="C0: dock={sensors.dc0_state}, carriage={sensors.cc0_state}"
    RESPOND MSG="L0: dock={sensors.dl0_state}, carriage={sensors.cl0_state}"
    RESPOND MSG="============================"