# camera_tool_0.cfg - Toolchanger configuration for Camera Tool 0
# Updated for string-based tool IDs


# Add this to camera_tool_0.cfg or camera_monitor.cfg
[gcode_macro UPDATE_CAMERA_SENSOR_STATES]
description: Update main system sensor states for camera tool
gcode:
    {% set dock_state = params.DOCK|default("UNKNOWN") %}
    {% set carriage_state = params.CARRIAGE|default("UNKNOWN") %}
    # Update the main sensor state variables
    SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=dc0_state VALUE='"{dock_state}"'
    SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=cc0_state VALUE='"{carriage_state}"'
    RESPOND MSG="Camera sensor states updated: dock={dock_state}, carriage={carriage_state}"



[gcode_macro CAMERA0_CONFIG]
variable_dock_x: 0
variable_dock_y: 0
variable_dock_z: 35
variable_unlock_x: 0
variable_unlock_y: 0
variable_lock_x: 0
variable_lock_y: 0
variable_loading: 0  # ‚Üê ADD THIS LINE
variable_active: 0  # 0: Not active, 1: Active
gcode:
    # Placeholder for variables

# Include the camera control configuration (which has the working MQTT commands)
[include camera_control.cfg]
# Include camera monitoring system
[include camera_monitor.cfg]
# Include camera state detection
[include camera_state_detection.cfg]

# === TOOL LED ===
# Define the neopixel for the camera tool
[neopixel led_c0]
pin: PB14  # REPLACE WITH ACTUAL PIN FOR YOUR CAMERA TOOL LED
chain_count: 1
color_order: GRB
initial_RED: 0
initial_GREEN: 0.0
initial_BLUE: 0.0

# === LED EFFECTS FOR CAMERA TOOL ===
[led_effect dock_state_c0]  # Use c0_ prefix instead of e10_
autostart: false
frame_rate: 24
leds:
    neopixel:led_c0
layers:
    static 10 1 top (0.5, 0.5, 0.5)  # White when docked

[led_effect lock_state_c0]  # Use c0_ prefix instead of e10_
autostart: false
frame_rate: 24
leds:
    neopixel:led_c0
layers:
    static 10 1 top (0, 0, 0.7)  # Blue when on carriage

[led_effect error_blink_c0]  # Use c0_ prefix instead of e10_
autostart: false
frame_rate: 24
leds:
    neopixel:led_c0
layers:
    strobe 1 2 add (1.0, 0, 0)  # Blinking red for error states

[led_effect heating_c0]  # Use c0_ prefix instead of e10_
autostart: false
frame_rate: 24
leds:
    neopixel:led_c0
layers:
    breathing 3 0 screen (0.5, 0.6, 0.05)  # Breathing yellow for heating

[led_effect idle_c0]  # Use c0_ prefix instead of e10_
autostart: false
frame_rate: 24
leds:
    neopixel:led_c0
layers:
    static 10 1 top (0, 1, 0.7)  # Cyan for idle state

[gcode_macro C0]
description: Load camera tool 0
gcode:
    LOAD_TOOL TOOL_ID=c0
    CAMERA0_TOOL_PICKED

# Camera tool state monitoring macros
[gcode_macro CHECK_C0_TOOL_STATE]
description: Check the current state of camera tool 0
gcode:
    # Call the external script that uses MQTT to check camera tool state
    RUN_SHELL_COMMAND CMD=check_camera PARAMS="check"

# Verify camera tool is in expected state
[gcode_macro VERIFY_C0_TOOL_STATE]
description: Verify camera tool 0 is in the expected state
gcode:
    # Get the expected states and pass to check script
    {% set expected_dock = params.DOCK|string %}
    {% set expected_carriage = params.CARRIAGE|string %}
    
    # Call external script with expected states
    # If expected_dock is "true", it means NOT PRESSED in your system
    # If expected_carriage is "false", it means PRESSED in your system
    RUN_SHELL_COMMAND CMD=check_camera PARAMS="{expected_dock} {expected_carriage}"

# Verify camera tool is properly picked up
[gcode_macro VERIFY_C0_TOOL_PICKUP]
description: Verify the camera tool 0 is properly picked up (on carriage)
gcode:
    # Camera tool should be on carriage (dock PRESSED, carriage NOT_PRESSED)
    # Which in your system means dock="false", carriage="true"
    RUN_SHELL_COMMAND CMD=check_camera PARAMS="verify_picked"

# Verify camera tool is properly docked
[gcode_macro VERIFY_C0_TOOL_DOCKED]
description: Verify the camera tool 0 is properly docked
gcode:
    # Camera tool should be in dock (dock NOT_PRESSED, carriage PRESSED)
    # Which in your system means dock="true", carriage="false"
    RUN_SHELL_COMMAND CMD=check_camera PARAMS="verify_docked"

# Camera tool change event handlers
[gcode_macro CAMERA0_TOOL_PICKED]
description: Call after camera tool 0 is picked up
gcode:
    VERIFY_C0_TOOL_PICKUP
    # Set active camera
    SET_GCODE_VARIABLE MACRO=CAMERA0_CONFIG VARIABLE=active VALUE="1"
    SET_GCODE_VARIABLE MACRO=VARIABLES_LIST VARIABLE=active_tool VALUE='"c0"'  # Use string-based ID
    # Start monitoring
    START_CAMERA_MONITORING DOCK=false CARRIAGE=true
    # Update LED status - use the c0_ LED effects
    UPDATE_LED_FROM_SENSORS TOOL_ID="c0"

[gcode_macro CAMERA0_TOOL_DOCKED]
description: Call after camera tool 0 is docked
gcode:
    VERIFY_C0_TOOL_DOCKED
    # Set camera inactive
    SET_GCODE_VARIABLE MACRO=CAMERA0_CONFIG VARIABLE=active VALUE="0"
    SET_GCODE_VARIABLE MACRO=VARIABLES_LIST VARIABLE=active_tool VALUE='"none"' # Use string-based "none"
    # Stop monitoring
    STOP_CAMERA_MONITORING
    UPDATE_LED_FROM_SENSORS TOOL_ID="c0"

# Register camera tool with the system
[delayed_gcode REGISTER_CAMERA_TOOL]
initial_duration: 2
gcode:
    REGISTER_TOOL TOOL_ID=c0
    # Also initialize camera usage counter
    SET_GCODE_VARIABLE MACRO=TOOL_USE_COUNT VARIABLE="c0_use_count" VALUE="0"

# === Remove any e10_* variables from the system ===
[delayed_gcode CLEAN_UP_E10_VARS]
initial_duration: 7
gcode:
    {% if 'save_variables' in printer %}
        {% set sv = printer.save_variables.variables %}
        {% if 'e10_lock_x' in sv %}
            RESPOND MSG="Removing redundant e10_* variables for cleaner configuration"
            SAVE_VARIABLE VARIABLE=e10_lock_x VALUE="0"
            SAVE_VARIABLE VARIABLE=e10_lock_y VALUE="0"
            SAVE_VARIABLE VARIABLE=e10_unlock_x VALUE="0"
            SAVE_VARIABLE VARIABLE=e10_unlock_y VALUE="0"
            SAVE_VARIABLE VARIABLE=e10_dock_x VALUE="0"
            SAVE_VARIABLE VARIABLE=e10_dock_y VALUE="0"
            SAVE_VARIABLE VARIABLE=e10_dock_z VALUE="0"
        {% endif %}
    {% endif %}

# === Helper function to update LED state ===
[gcode_macro UPDATE_LED_FROM_SENSORS_CAMERA]
description: Update camera tool LED based on sensor states
gcode:
    # If the tool is on the carriage, show lock state
    {% if printer["gcode_macro CAMERA0_CONFIG"].active|int == 1 %}
        SET_LED_EFFECT EFFECT=c0_lock_state
    {% else %}
        # Otherwise show dock state
        SET_LED_EFFECT EFFECT=c0_dock_state
    {% endif %}

# === LED INITIALIZATION ===
[delayed_gcode INIT_CAMERA_TOOL_LED]
initial_duration: 5.0
gcode:
#    UPDATE_LED_FROM_SENSORS_CAMERA


# === SIMPLE CAMERA TOOL CONFIG ===
# This is a minimal C0 macro that calls DO_TOOL_CHANGE directly
# Add this to your camera_tool_0.cfg file




