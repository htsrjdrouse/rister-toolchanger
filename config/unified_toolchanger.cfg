# ===== UNIFIED TOOLCHANGER SYSTEM =====
# A simplified system with single load/unload macros that work for all tools

# ===== UNIVERSAL TOOL LOADING/UNLOADING =====

[gcode_macro LOAD_TOOL]
description: Universal tool loading macro
gcode:
    # Parameter: TOOL_ID - tool identifier (e0, e1, c0, l0, etc.)
    {% set tool_id = params.TOOL_ID|lower %}
    
    # Check if tool is calibrated
    {% if 'save_variables' not in printer %}
        RESPOND MSG="save_variables module is not configured. Please add [save_variables] to your printer.cfg"
        
    {% elif tool_id ~ '_lock_x' not in printer.save_variables.variables %}
        RESPOND MSG="Tool {tool_id} is not calibrated. Please run CALC_DOCK_LOCATION TOOL_ID="{tool_id}" first."
        
    {% else %}
        # Check if we need to unload a current tool first
        {% set active_tool = printer["gcode_macro VARIABLES_LIST"].active_tool %}
        {% if active_tool != "none" and active_tool != tool_id %}
            RESPOND MSG="Unloading Tool {active_tool} before loading Tool {tool_id}"
            UNLOAD_TOOL TOOL_ID="{active_tool}"
        {% endif %}
        
        # Get coordinates directly from save_variables
        {% set dock_x = printer.save_variables.variables[tool_id ~ '_dock_x']|float %}
        {% set dock_y = printer.save_variables.variables[tool_id ~ '_dock_y']|float %}
        {% set dock_z = printer.save_variables.variables[tool_id ~ '_dock_z']|float %}
        #{% set lock_x = printer.save_variables.variables[tool_id ~ '_lock_x']|float %}
        #{% set lock_y = printer.save_variables.variables[tool_id ~ '_lock_y']|float %}
        {% set unlock_x = printer.save_variables.variables[tool_id ~ '_unlock_x']|float %}
        {% set unlock_y = printer.save_variables.variables[tool_id ~ '_unlock_y']|float %}
        
        # Z lift for safety
        G0 Z20 F1000
        
        # Report current position
        RESPOND MSG="Starting tool load from position: X={printer.toolhead.position.x}, Y={printer.toolhead.position.y}, Z={printer.toolhead.position.z}"
        
        # STEP 1: Move to dock_x using G1
        RESPOND MSG="1. Moving to dock_x X={dock_x}"
        G1 X{dock_x} F3000
        M400  # Wait for move to complete
        
        # STEP 2: Move to dock_y using G1
        RESPOND MSG="2. Moving to dock_y Y={dock_y}"
        G1 Y{dock_y} F3000
        M400  # Wait for move to complete
        
        # STEP 3: Move to dock_z
        RESPOND MSG="3. Moving to dock_z Z={dock_z}"
        G1 Z{dock_z} F1000
        M400  # Wait for move to complete
        
        # STEP 4: Move to unlock_x
        RESPOND MSG="4. Moving to unlock_x X={unlock_x}"
        G1 X{unlock_x} F3000
        M400  # Wait for move to complete
        
        # STEP 5: Lock the tool
        RESPOND MSG="5. Locking the tool"
        TOOL_LOCK
        M400  # Wait for lock to complete
        
        # STEP 6: Move away
        RESPOND MSG="6. Moving away Y={dock_y - 50}"
        G1 Y{dock_y - 50} F6000
        M400  # Wait for move to complete
        
        # STEP 7: Call the appropriate tool_picked handler
        RESPOND MSG="7. Updating tool status"
        {% if tool_id == "e0" %}
            TOOL_PICKED_E0
            ACTIVATE_EXTRUDER EXTRUDER=extruder
        {% elif tool_id == "e1" %}
            TOOL_PICKED_E1
            ACTIVATE_EXTRUDER EXTRUDER=extruder1
        {% elif tool_id == "c0" %}
            CAMERA0_TOOL_PICKED
            # Camera tool uses liquid tool syringe pump extruder as a dummy
            {% if printer["gcode_macro LIQUID_TOOL_CONFIG"] is defined %}
                SET_GCODE_VARIABLE MACRO=LIQUID_TOOL_CONFIG VARIABLE=active_dispenser VALUE="0"
                {% set pump_id = printer["gcode_macro LIQUID_TOOL_CONFIG"].tool_pump_map['c0'] %}
                SET_GCODE_VARIABLE MACRO=LIQUID_TOOL_CONFIG VARIABLE=active_pump VALUE="{pump_id}"
                RESPOND MSG="Camera tool 0 now using syringe pump {pump_id}"
                # Make extruder_syringe0 the active extruder
                ACTIVATE_EXTRUDER EXTRUDER=extruder2
            {% endif %}
        {% elif tool_id == "l0" %}
            TOOL_PICKED_L0
            # Liquid dispenser specific operations
            {% if printer["gcode_macro LIQUID_TOOL_CONFIG"] is defined %}
                SET_GCODE_VARIABLE MACRO=LIQUID_TOOL_CONFIG VARIABLE=active_dispenser VALUE="0"
                {% set pump_id = printer["gcode_macro LIQUID_TOOL_CONFIG"].tool_pump_map['l0'] %}
                SET_GCODE_VARIABLE MACRO=LIQUID_TOOL_CONFIG VARIABLE=active_pump VALUE="{pump_id}"
                RESPOND MSG="Liquid dispenser 0 now using syringe pump {pump_id}"
                # Make extruder_syringe0 the active extruder
                ACTIVATE_EXTRUDER EXTRUDER=extruder2
            {% endif %}
        {% endif %}
        
        # Increment tool usage counter
        #INCREMENT_TOOL_USE_COUNT T="{tool_id}"
        
        RESPOND MSG="Tool {tool_id} loaded successfully"
    {% endif %}

[gcode_macro UNLOAD_TOOL]
description: Universal tool unloading macro
gcode:
    # Parameter: TOOL_ID - tool identifier (e0, e1, c0, l0, etc.)
    {% set tool_id = params.TOOL_ID|lower %}
    
    # Check if this is a valid tool to unload
    {% if tool_id == "none" %}
        RESPOND MSG="No tool is currently active. Nothing to unload."
        
    {% elif tool_id ~ '_lock_x' not in printer.save_variables.variables %}
        RESPOND MSG="Tool {tool_id} is not properly configured. Cannot unload."
        
    {% else %}
        # Get coordinates directly from save_variables
        {% set dock_x = printer.save_variables.variables[tool_id ~ '_dock_x']|float %}
        {% set dock_y = printer.save_variables.variables[tool_id ~ '_dock_y']|float %}
        {% set dock_z = printer.save_variables.variables[tool_id ~ '_dock_z']|float %}
        #{% set lock_x = printer.save_variables.variables[tool_id ~ '_lock_x']|float %}
        #{% set lock_y = printer.save_variables.variables[tool_id ~ '_lock_y']|float %}
        {% set unlock_x = printer.save_variables.variables[tool_id ~ '_unlock_x']|float %}
        {% set unlock_y = printer.save_variables.variables[tool_id ~ '_unlock_y']|float %}
        
        # Z lift for safety
        G0 Z20 F1000
        
        # Report current position
        RESPOND MSG="Starting tool unload from position: X={printer.toolhead.position.x}, Y={printer.toolhead.position.y}, Z={printer.toolhead.position.z}"
        
        # STEP 1: Move to lock_x
        RESPOND MSG="1. Moving to unlock_x X={unlock_x}"
        G1 X{unlock_x} F3000
        M400  # Wait for move to complete
        
        # STEP 2: Approach lock_y
        RESPOND MSG="2. Approaching unlock_y Y={unlock_y - 10}"
        G1 Y{unlock_y - 10} F3000
        M400  # Wait for move to complete
        
        # STEP 3: Final approach to lock_y
        RESPOND MSG="3. Final approach to unlock_y Y={unlock_y}"
        G1 Y{unlock_y} F3000
        M400  # Wait for move to complete
        
        # STEP 4: Unlock the tool
        RESPOND MSG="4. Unlocking the tool"
        TOOL_UNLOCK
        M400  # Wait for unlock to complete
        
        # STEP 5: Move to unlock_x
        RESPOND MSG="5. Moving to dock_x X={dock_x}"
        G1 X{dock_x} F3000
        M400  # Wait for move to complete
        
        # STEP 6: Move to unlock_y
        RESPOND MSG="6. Moving to dock_y Y={dock_y}"
        G1 Y{dock_y} F3000
        M400  # Wait for move to complete
        
        # STEP 7: Move to dock_x
        RESPOND MSG="7. Moving to dock_x X={dock_x}"
        G1 X{dock_x} F3000
        M400  # Wait for move to complete
        
        # STEP 8: Move away
        RESPOND MSG="8. Moving away Y={dock_y - 50}"
        G1 Y{dock_y - 50} F6000
        M400  # Wait for move to complete
        
        # STEP 9: Call the appropriate tool_docked handler
        RESPOND MSG="9. Updating tool status"
        {% if tool_id == "e0" %}
            TOOL_DOCKED_E0
        {% elif tool_id == "e1" %}
            TOOL_DOCKED_E1
        {% elif tool_id == "c0" %}
            CAMERA0_TOOL_DOCKED
        {% elif tool_id == "l0" %}
            TOOL_DOCKED_L0
        {% endif %}
        
        RESPOND MSG="Tool {tool_id} unloaded successfully"
    {% endif %}

# ===== PRIMARY TOOL COMMANDS =====
# These simple macros just call the universal LOAD_TOOL command

[gcode_macro A_1]
description: Unload the currently active tool
gcode:
    # Get the active tool ID
    {% set active_tool = printer["gcode_macro VARIABLES_LIST"].active_tool %}
    UNLOAD_TOOL TOOL_ID="{active_tool}"



# === Initialize value at startup ===
#[delayed_gcode INIT_VARIABLES_LIST]
#initial_duration: 1.0
#gcode:
#    # Make sure active_tool is initialized as "none" not -1
#    SET_GCODE_VARIABLE MACRO=VARIABLES_LIST VARIABLE=active_tool VALUE="null"
#    RESPOND MSG="Tool system initialized with string-based IDs"


# --- Tool Registration and Status ---
# unique to rister_toolchanger.cfg
[gcode_macro REGISTER_TOOL]
description: Register a tool in the system
gcode:
    {% set tool_id = params.TOOL_ID|lower %}
    
    # Add to tools list if not already there
    {% set tools = printer["gcode_macro VARIABLES_LIST"].tools %}
     
    {% if tool_id not in tools %}
        {% set tools = tools + [tool_id] %}
        SET_GCODE_VARIABLE MACRO=VARIABLES_LIST VARIABLE=tools VALUE="{tools}"
    {% endif %}
    
    RESPOND MSG="Tool {tool_id} registered in the system"

[gcode_macro VARIABLES_LIST]
variable_tc_state: 0          # 0: Operational, -1: Error
variable_active_tool: "none"  # "none": No tool, "e0", "e1", "c0", "l0", etc.
variable_tools: ["e0", "e1", "c0", "l0"]  # List of available tools
variable_tc_error_code: 0     # Error code if tc_state is -1
variable_error_tools: []      # List of tools in error state
variable_global_z_offset: 0   # Global Z offset applied to all tools
gcode:
    # This is just a placeholder for the variables


# === ADD MISSING TOOL_LOCK MACRO ===
[gcode_macro TOOL_LOCK]
description: Lock the tool in place
gcode:
    # Add your actual tool locking sequence here
    # This might be servo movement, solenoid, or other hardware control
    RESPOND MSG="Tool locked in place"
    # Example: SET_SERVO SERVO=tool_lock ANGLE=90



