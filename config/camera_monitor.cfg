# Camera Tool Monitoring Configuration for Dakash Toolchanger
# This file provides Klipper integration for the camera tool monitoring

# Shell commands to run check_camera.sh with different arguments
[gcode_shell_command verify_docked]
command: /home/pi/check_camera.sh verify_docked
timeout: 15
verbose: True

[gcode_shell_command verify_picked]
command: /home/pi/check_camera.sh verify_picked
timeout: 15
verbose: True

[gcode_shell_command check_camera]
#command: /home/pi/check_camera.sh check
command: /home/pi/check_camera.sh
timeout: 15
verbose: True

[gcode_shell_command query_camera]
command: /home/pi/check_camera.sh
timeout: 15
verbose: True

# Klipper macros for camera tool monitoring
[gcode_macro VERIFY_CAMERA_DOCKED]
description: Verify the camera tool is properly docked
gcode:
    RUN_SHELL_COMMAND CMD=verify_docked

[gcode_macro VERIFY_CAMERA_PICKED]
description: Verify the camera tool is properly on the carriage
gcode:
    RUN_SHELL_COMMAND CMD=verify_picked

[gcode_macro CHECK_CAMERA]
description: Check general camera tool state and detect impossible states
gcode:
    RUN_SHELL_COMMAND CMD=check_camera

[gcode_macro QUERY_CAMERA]
description: Get current camera tool sensor values
gcode:
    RUN_SHELL_COMMAND CMD=query_camera

# Monitoring context for automated checks
[gcode_macro CAMERA_MONITOR_CONTEXT]
variable_active: 0
variable_interval: 30
gcode:
    # This is a placeholder for variables

# Start automated monitoring of camera tool
[gcode_macro START_CAMERA_MONITORING]
description: Begin periodic monitoring of camera tool state
gcode:
    SET_GCODE_VARIABLE MACRO=CAMERA_MONITOR_CONTEXT VARIABLE=active VALUE="1"
    UPDATE_DELAYED_GCODE ID=CAMERA_MONITOR_CHECK DURATION=1

# Stop automated monitoring of camera tool
[gcode_macro STOP_CAMERA_MONITORING]
description: Stop periodic monitoring of camera tool state
gcode:
    SET_GCODE_VARIABLE MACRO=CAMERA_MONITOR_CONTEXT VARIABLE=active VALUE="0"
    UPDATE_DELAYED_GCODE ID=CAMERA_MONITOR_CHECK DURATION=0

# Periodic check of camera tool status
[delayed_gcode CAMERA_MONITOR_CHECK]
initial_duration: 0
gcode:
    # Only perform check if monitoring is active
    {% if printer["gcode_macro CAMERA_MONITOR_CONTEXT"].active|int == 1 %}
        # Run the general check
        RUN_SHELL_COMMAND CMD=check_camera
        
        # Schedule next check
        {% set interval = printer["gcode_macro CAMERA_MONITOR_CONTEXT"].interval|default(30)|int %}
        UPDATE_DELAYED_GCODE ID=CAMERA_MONITOR_CHECK DURATION="{interval}"
    {% endif %}

# Add camera monitoring to print start
[gcode_macro _START_CAMERA_MONITORING_HOOK]
description: Hook to enable monitoring at print start
gcode:
    # Start monitoring camera tool
    START_CAMERA_MONITORING

# Add camera monitoring stop to print end
[gcode_macro _STOP_CAMERA_MONITORING_HOOK]
description: Hook to disable monitoring at print end
gcode:
    # Stop monitoring camera tool
    STOP_CAMERA_MONITORING

# Tool change integration macros
[gcode_macro CAMERA_TOOL_PICKED]
description: Call after picking up camera tool
gcode:
    # Verify camera is properly picked up
    VERIFY_CAMERA_PICKED
    # Start monitoring in picked state
    START_CAMERA_MONITORING

[gcode_macro CAMERA_TOOL_DOCKED]
description: Call before docking camera tool
gcode:
    # Verify camera is properly docked
    VERIFY_CAMERA_DOCKED
    # Stop monitoring
    STOP_CAMERA_MONITORING

# Initialize at startup
[delayed_gcode CAMERA_INIT]
initial_duration: 10  # Run 10 seconds after startup
gcode:
    # Check camera status once at startup
    QUERY_CAMERA

# Add a gateway to CALIBRATE_CAMERA_DOCK in camera_dock_calibrate.cfg
[gcode_macro CALC_CAMERADOCK_LOCATION_INFO]
description: Information about calibrating camera dock location
gcode:
    M118 To calibrate the camera dock location, use:
    M118   CALIBRATE_CAMERA_DOCK [CAMERATOOL=0]
    M118 This will calculate and store the dock position in variables.cfg
