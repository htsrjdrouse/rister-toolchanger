# Camera Tool State Detection and Validation
# Works with check_camera.sh to monitor and validate camera tool states

# Shell command to run the sensor query script without parameters
[gcode_shell_command query_camera]
command: ~/check_camera.sh
timeout: 15
verbose: True

# Shell command to verify expected state with parameters
[gcode_shell_command verify_camera_state]
command: ~/check_camera.sh {params.DOCK} {params.CARRIAGE}
timeout: 15
verbose: True

# Check camera current state without validation
[gcode_macro CHECK_CAMERA_STATE]
description: Check the current state of the camera tool
gcode:
    RUN_SHELL_COMMAND CMD=query_camera

# Verify camera is in expected state
[gcode_macro VERIFY_CAMERA_STATE]
description: Verify camera tool is in the expected state
gcode:
    # Get the parameters
    {% set dock = params.DOCK|default('') %}
    {% set carriage = params.CARRIAGE|default('') %}
    
    # Run the verification with explicit parameters
    RUN_SHELL_COMMAND CMD=verify_camera_state PARAMS="DOCK="{dock}" CARRIAGE="{carriage}""

# Start monitoring in a specific state context
[gcode_macro START_CAMERA_MONITORING]
description: Start periodic camera monitoring (optionally with state verification)
gcode:
    # Parse parameters
    {% set dock = params.DOCK|default('') %}
    {% set carriage = params.CARRIAGE|default('') %}
    
    # Store the expected state
    {% if dock %}
        SET_GCODE_VARIABLE MACRO=CAMERA_MONITOR_CONTEXT VARIABLE=expected_dock VALUE="{dock}"
    {% endif %}
    {% if carriage %}
        SET_GCODE_VARIABLE MACRO=CAMERA_MONITOR_CONTEXT VARIABLE=expected_carriage VALUE="{carriage}"
    {% endif %}
    
    # Set monitoring as active
    SET_GCODE_VARIABLE MACRO=CAMERA_MONITOR_CONTEXT VARIABLE=active VALUE="1"
    
    # Start monitoring
    UPDATE_DELAYED_GCODE ID=PERIODIC_CAMERA_CHECK DURATION=1

# Stop monitoring
[gcode_macro STOP_CAMERA_MONITORING]
description: Stop camera tool state monitoring
gcode:
    # Set monitoring as inactive
    SET_GCODE_VARIABLE MACRO=CAMERA_MONITOR_CONTEXT VARIABLE=active VALUE="0"
    # Clear expected states
    SET_GCODE_VARIABLE MACRO=CAMERA_MONITOR_CONTEXT VARIABLE=expected_dock VALUE=""
    SET_GCODE_VARIABLE MACRO=CAMERA_MONITOR_CONTEXT VARIABLE=expected_carriage VALUE=""
    # Cancel scheduled checks
    UPDATE_DELAYED_GCODE ID=PERIODIC_CAMERA_CHECK DURATION=0

# Context variables for monitoring
[gcode_macro CAMERA_MONITOR_CONTEXT]
variable_active: 0
variable_expected_dock: ""
variable_expected_carriage: ""
variable_interval: 30
gcode:
    # This is just a placeholder for the variables

# Scheduled checking for camera tool
[delayed_gcode PERIODIC_CAMERA_CHECK]
initial_duration: 0
gcode:
    # Only check if monitoring is active
    {% if printer["gcode_macro CAMERA_MONITOR_CONTEXT"].active|int == 1 %}
        # Get expected states
        {% set dock = printer["gcode_macro CAMERA_MONITOR_CONTEXT"].expected_dock %}
        {% set carriage = printer["gcode_macro CAMERA_MONITOR_CONTEXT"].expected_carriage %}
        
        # Check if we have expected states to verify
        {% if dock and carriage %}
            # Run verification with expected states
            RUN_SHELL_COMMAND CMD=verify_camera_state PARAMS="DOCK="{dock}" CARRIAGE="{carriage}""
        {% else %}
            # Just check without verification
            RUN_SHELL_COMMAND CMD=query_camera
        {% endif %}
        
        # Schedule next check
        {% set interval = printer["gcode_macro CAMERA_MONITOR_CONTEXT"].interval|default(30)|int %}
        UPDATE_DELAYED_GCODE ID=PERIODIC_CAMERA_CHECK DURATION="{interval}"
    {% endif %}

# Macro to verify camera tool is properly picked up
[gcode_macro VERIFY_CAMERA_PICKUP]
description: Verify the camera tool is properly picked up (on carriage)
gcode:
    # Camera should be on carriage (carriage sensor PRESSED, dock sensor NOT PRESSED)
    # Since true = PRESSED, false = NOT PRESSED in your system:
    RUN_SHELL_COMMAND CMD=check_camera PARAMS="false true"

# Macro to verify camera tool is properly docked
[gcode_macro VERIFY_CAMERA_DOCKED]
description: Verify the camera tool is properly docked
gcode:
    # Camera should be in dock (dock sensor PRESSED, carriage sensor NOT PRESSED)
    # Since true = PRESSED, false = NOT PRESSED in your system:
    RUN_SHELL_COMMAND CMD=check_camera PARAMS="true false"

# Tool change handling - start monitoring in pickup position
[gcode_macro CAMERA_TOOL_PICKED]
description: Call after camera tool is picked up to start monitoring
gcode:
    # Start monitoring expecting camera on carriage
    START_CAMERA_MONITORING DOCK=false CARRIAGE=true

# Tool change handling - verify docking before stopping monitoring
[gcode_macro CAMERA_TOOL_DOCKED]
description: Call before docking to ensure proper docking
gcode:
    # Verify camera is properly docked
    VERIFY_CAMERA_DOCKED
    # Stop monitoring
    STOP_CAMERA_MONITORING

# Run initialization at startup
[delayed_gcode STARTUP_CAMERA_CHECK]
initial_duration: 5  # Run 5 seconds after startup
gcode:
    # Check camera status at startup
    CHECK_CAMERA_STATE