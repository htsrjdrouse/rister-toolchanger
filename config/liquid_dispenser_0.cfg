# liquid_dispenser_0.cfg - Fixed version

[servo linearactuator_servo_l0]
pin: PB7  # Use the GPIO pin you connected to
#hardware_pwm: True
#pwm_frequency: 50  # Adjust as needed for your servo
maximum_servo_angle: 180
minimum_pulse_width: 0.0005
maximum_pulse_width: 0.0024

# === TOOL LED ===
[neopixel led_l0]
pin: PB6
chain_count: 1
color_order: GRB
initial_RED: 0.5    # Start with white to show docked state
initial_GREEN: 0.5
initial_BLUE: 0.5

# === LED EFFECTS ===
[led_effect dock_state_l0]
autostart: true     # Auto-start so tool shows white when docked by default
frame_rate: 24
leds:
    neopixel:led_l0
layers:
    static 10 1 top (0.5, 0.5, 0.5)  # White when docked

[led_effect lock_state_l0]
autostart: false
frame_rate: 24
leds:
    neopixel:led_l0
layers:
    static 10 1 top (0, 0, 0.7)  # Blue when on carriage

[led_effect error_blink_l0]
autostart: false
frame_rate: 24
leds:
    neopixel:led_l0
layers:
    strobe 1 2 add (1.0, 0, 0)  # Blinking red for error states

[led_effect heating_l0]
autostart: false
frame_rate: 24
leds:
    neopixel:led_l0
layers:
    breathing 3 0 screen (0.5, 0.6, 0.05)  # Breathing yellow for heating

[led_effect idle_l0]
autostart: false
frame_rate: 24
leds:
    neopixel:led_l0
layers:
    static 10 1 top (0, 1, 0.7)  # Cyan for idle state


[gcode_macro UPDATE_LED_FROM_SENSORS_LIQUID]
description: Update LED state based on sensor readings for specified tool
gcode:
    {% set tool_id = params.TOOL_ID|default("l0")|string %}
    
    {% if tool_id == "l0" %}  # Liquid dispenser tool 0
        # Get sensor states - use get() with defaults to handle missing variables
        {% set dock_state = printer["gcode_macro TOOL_SENSOR_STATES"].get("dl0_state", "RELEASED") %}
        {% set carriage_state = printer["gcode_macro TOOL_SENSOR_STATES"].get("cl0_state", "RELEASED") %}
        
        # Determine LED state based on sensor readings
        {% if dock_state == "PRESSED" and carriage_state == "RELEASED" %}
            # Tool is docked (in dock, not on carriage) - WHITE
            SET_LED_EFFECT EFFECT=dock_state_l0
            
        {% elif dock_state == "RELEASED" and carriage_state == "PRESSED" %}
            # Tool is on carriage (not in dock, on carriage) - BLUE
            SET_LED_EFFECT EFFECT=lock_state_l0
            
        {% elif dock_state == "RELEASED" and carriage_state == "RELEASED" %}
            # Tool is in transition or error state - CYAN
            SET_LED_EFFECT EFFECT=idle_l0
            
        {% else %}
            # Both sensors pressed - error state - RED BLINK
            SET_LED_EFFECT EFFECT=error_blink_l0
        {% endif %}
    {% endif %}



# === SENSORS ===
[atc_switch dl0]
pin: PG13
press:
    RESPOND MSG="dl0 sensor PRESSED"
    SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=dl0_state VALUE='"PRESSED"'
    UPDATE_LED_FROM_SENSORS TOOL_ID="l0"
release:
    RESPOND MSG="dl0 sensor RELEASED - Tool removed from dock"
    SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=dl0_state VALUE='"RELEASED"'
    UPDATE_LED_FROM_SENSORS TOOL_ID="l0"

[atc_switch cl0]
pin: PG12
press:
    RESPOND MSG="cl0 sensor PRESSED - Tool is on carriage"
    SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=cl0_state VALUE='"PRESSED"'
    UPDATE_LED_FROM_SENSORS TOOL_ID="l0"
release:
    RESPOND MSG="cl0 sensor RELEASED - Tool removed from carriage"
    SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=cl0_state VALUE='"RELEASED"'
    UPDATE_LED_FROM_SENSORS TOOL_ID="l0"




# === CHECK_SENSORS ===
[gcode_macro CHECK_SENSORS_L0]
description: Force an update of the LED state based on current sensor values
gcode:
#    UPDATE_LED_FROM_SENSORS TOOL_ID="l0"

# === PERIODIC_SENSOR_CHECK ===
# Commented out to reduce logging - uncomment if you want periodic LED updates
# [delayed_gcode PERIODIC_SENSOR_CHECK_L0]
# initial_duration: 10.0
# gcode:
#     UPDATE_LED_FROM_SENSORS TOOL_ID="l0"
#     UPDATE_DELAYED_GCODE ID=PERIODIC_SENSOR_CHECK_L0 DURATION=10.0

# === CONFIGURATION VARIABLES ===
[gcode_macro CONFIG_L0]
variable_dock_x: 0
variable_dock_y: 0
variable_dock_z: 0
variable_dock_unlock_x: 0
variable_dock_unlock_y: 0
variable_dock_lock_x: 0
variable_dock_lock_y: 0
variable_loading: 0  # ‚Üê ADD THIS LINE
variable_active: 0
gcode:
    # Placeholder for variables

[gcode_macro L0]
description: Load liquid dispenser tool 0
gcode:
    LOAD_TOOL TOOL_ID=l0



# === TOOL STATE HANDLERS ===
[gcode_macro TOOL_PICKED_L0]
description: Call after liquid dispenser tool 0 is picked up
gcode:
    # Set active dispenser
    SET_GCODE_VARIABLE MACRO=CONFIG_L0 VARIABLE=active VALUE="1"
    SET_GCODE_VARIABLE MACRO=VARIABLES_LIST VARIABLE=active_tool VALUE='"l0"'
    UPDATE_LED_FROM_SENSORS TOOL_ID="l0"

[gcode_macro TOOL_DOCKED_L0]
description: Call after liquid dispenser tool 0 is docked
gcode:

    # Set dispenser inactive
    SET_GCODE_VARIABLE MACRO=CONFIG_L0 VARIABLE=active VALUE="0"
    SET_GCODE_VARIABLE MACRO=VARIABLES_LIST VARIABLE=active_tool VALUE='"none"'
    UPDATE_LED_FROM_SENSORS TOOL_ID="l0"

# === LED INITIALIZATION ===
[delayed_gcode INIT_TOOL_L0_LED]
initial_duration: 5.0
gcode:
    # Initialize sensor states - assume tool starts docked
    SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=dl0_state VALUE='"PRESSED"'
    SET_GCODE_VARIABLE MACRO=TOOL_SENSOR_STATES VARIABLE=cl0_state VALUE='"RELEASED"'
    # Update LED state
#    UPDATE_LED_FROM_SENSORS TOOL_ID="l0"
    RESPOND MSG="Tool L0 LED system initialized - should show WHITE (docked)"

# Register tool with the system
[delayed_gcode REGISTER_LIQUID_TOOL_0]
initial_duration: 2
gcode:
    {% if printer["gcode_macro REGISTER_TOOL"] is defined %}
        REGISTER_TOOL TOOL_ID=l0
    {% endif %}
    # Also initialize liquid tool usage counter if system exists
    {% if printer["gcode_macro TOOL_USE_COUNT"] is defined %}
        SET_GCODE_VARIABLE MACRO=TOOL_USE_COUNT VARIABLE="l0_use_count" VALUE="0"
    {% endif %}

# === MAIN TOOL SELECTION COMMAND ===
[gcode_macro L0]
description: Load liquid dispenser tool 0
gcode:
    # Check if DO_TOOL_CHANGE exists (part of your tool changer system)
    {% if printer["gcode_macro DO_TOOL_CHANGE"] is defined %}
        DO_TOOL_CHANGE TOOL_ID=l0
    {% else %}
        # Fallback to basic tool change if DO_TOOL_CHANGE doesn't exist
        RESPOND MSG="Loading liquid dispenser tool L0..."
        # Call tool picked handler
        TOOL_PICKED_L0
    {% endif %}
    
    # Liquid dispenser specific operations
    {% if printer["gcode_macro LIQUID_TOOL_CONFIG"] is defined %}
        SET_GCODE_VARIABLE MACRO=LIQUID_TOOL_CONFIG VARIABLE=active_dispenser VALUE="0"
        {% set pump_id = printer["gcode_macro LIQUID_TOOL_CONFIG"].tool_pump_map['l0'] %}
        SET_GCODE_VARIABLE MACRO=LIQUID_TOOL_CONFIG VARIABLE=active_pump VALUE="{pump_id}"
        RESPOND MSG="Liquid dispenser 0 now using syringe pump {pump_id}"
        
        # Make extruder_syringe0 the active extruder if it exists
        #{% if printer["extruder_syringe0"] is defined %}
        #    ACTIVATE_EXTRUDER EXTRUDER=extruder_syringe0
        #{% elif printer["extruder1"] is defined %}
        #    ACTIVATE_EXTRUDER EXTRUDER=extruder1
        #{% endif %}
    {% endif %}

